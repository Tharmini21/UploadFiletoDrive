/**
 * @file converseai_providers.js
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';
// import { createHash } from 'crypto';
const {google} = require('googleapis');
const Status                    = require('@converseai/plugins-sdk').Status;
const OAuth2SetupDataResponse   = require('@converseai/plugins-sdk').Payloads.OAuth2SetupDataResponse;
const OAuth2HandleCodeResponse  = require('@converseai/plugins-sdk').Payloads.OAuth2HandleCodeResponse;
const oauth = require('./lib/Oauth2');
const configdata =require('./lib/ConfigSecret')
// var crypto = require('crypto');

/**
* Triggers the OAuth2 process.
*/
var onOAuthStart = function(app, body) {
  var response = new OAuth2SetupDataResponse();
  response.setOAuth2URI(configdata.oauthurl);
  response.setClientID(configdata.ClientId);
  response.setScope(configdata.Scope);
  response.redirect_uri=configdata.redirect_uri;
  response.setState("");
  response.setComment('<div>' +
    '<p>To link this workspace with a specific Google Drive account, authenticate with the account.</p>' +
    '<p><cv-button cv-click="authenticate()">Authenticate</cv-button></p></div>');
  response.setExtraParams(null);
  app.send(Status.SUCCESS, response);
}

/**
* Handle the OAuth code.
*/
const getAccessToken = (clientId, secret, code) => {
  // const sha256 = crypto('sha256').update(`${secret}|${code}`).digest('hex');

  const client = smartsheet.createClient({});
  return client.tokens.getAccessToken({
    queryParameters: {
      client_id: clientId,
      grant_type: 'authorization_code',
      code,
      client_secret:secret
      //hash: sha256,
    },
    contentType: 'application/x-www-form-urlencoded',
  });
};
var onOAuthHandleCode = function(app, body) {
 
  if (app.code === undefined || app.code === null || app.code === '') {
    throw new Error(
      'failed to create access token : authentication code not specified'
    );
  }
  var clientId =configdata.clientId;
  var secret  = configdata.secret;
  return getAccessToken(clientId, secret, params.code)
    // .then(token => ({
    //   access_token: token.access_token,
    //   expires_in: token.expires_in,
    //   refresh_token: token.refresh_token,
    //   token_type: token.token_type,
    // }))
    .then((data) => {
      var response = new OAuth2HandleCodeResponse();
      response.setAccessToken(data.access_token);
      response.setRefreshToken(data.refresh_token);
      response.setTokenType("Bearer");
      response.setExpiresIn(data.expires_in);
      response.setGrantType("authorization_code");
      response.setMessage("Authentication successful");
      app.send(Status.SUCCESS, response);
    })
    .catch(err => {
      throw new Error(`failed to create access token : ${err.message}`);
    });
}

/**
* Renew the oauth token.
*/
const refreshAccessToken = (clientId, secret, refreshToken) => {
  const sha256 = crypto('sha256')
    .update(`${secret}|${refreshToken}`)
    .digest('hex');

  const client = smartsheet.createClient({});
  return client.tokens.getAccessToken({
    queryParameters: {
      client_id: clientId,
      grant_type: 'refresh_token',
      client_secret:secret,
     // hash: sha256,
      refresh_token: refreshToken,
    },
    contentType: 'application/x-www-form-urlencoded',
  });
};
var onOAuthRenewToken = function(app, body) {
  var response = new OAuth2HandleCodeResponse();
  if (
    app.renewToken === undefined ||
    app.renewToken === null ||
    app.renewToken === ''
  ) {
    throw new Error(
      'failed to refresh access token : renew token not specified'
    );
  }

  var clientId = "218866420163-28if048id8aij2l4iu567poivgvr1a87.apps.googleusercontent.com";
  var secret = "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";

  return refreshAccessToken(clientId, secret, app.renewToken)
    // .then(token => ({
    //   access_token: token.access_token,
    //   expires_in: token.expires_in,
    //   refresh_token: token.refresh_token,
    //   token_type: token.token_type,
    // }))
    .then((token) => {
    response.setAccessToken(token.access_token);
    response.setRefreshToken(token.refresh_token);
    response.setTokenType(token.token_type);
    response.setExpiresIn(token.expires_in);
    app.send(Status.SUCCESS, response);
    })
    .catch(err => {
      throw new Error(`failed to refresh access token : ${err.message}`);
    });
}

module.exports = {
  onOAuthStart: onOAuthStart,
  onOAuthHandleCode: onOAuthHandleCode,
  onOAuthRenewToken: onOAuthRenewToken
}
